#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-s, --start <date>', 'start date')
.option('-e, --end <date>', 'end date')
.option('-l, --limit <num>', 'end date')
.process('revisions')

const { isEntityId, getRevisions } = require('../lib/wbk')(program)
const lightGet = require('../lib/light_get')
const parseId = require('../lib/tolerant_id_parser')
const errors_ = require('../lib/errors')
const logNdjson = require('../lib/log_ndjson')
const { isPositiveIntegerString } = require('../lib/types')
const _ = require('lodash')

const ids = program.args.map(parseId)
if (!(ids && ids.length > 0)) return program.help()

ids.forEach(id => {
  if (!isEntityId(id)) throw new Error(`invalid entity id: ${id}`)
})

const query = {}
var { start, end, limit, verbose } = program
if (isPositiveIntegerString(start)) start = parseInt(start)
if (isPositiveIntegerString(end)) end = parseInt(end)

query.start = start
query.end = end
query.limit = limit

const getAndLogRevisions = id => {
  const url = getRevisions(id, query)
  if (verbose) console.log(`revision query: ${id}`, url)
  return lightGet(url)
  .then(body => _.values(body.query.pages)[0])
}

if (ids.length === 1) {
  getAndLogRevisions(ids[0])
  .then(data => console.log(JSON.stringify(data)))
  .catch(errors_.exit)
} else {
  // Getting revisisions data individually to be able to pass parameters
  // cf https://github.com/maxlath/wikibase-sdk/blob/master/docs/get_revisions.md
  Promise.all(ids.map(getAndLogRevisions))
  .then(logNdjson)
  .catch(errors_.exit)
}
