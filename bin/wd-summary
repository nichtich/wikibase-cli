#!/usr/bin/env node
const entityDataParser = require('../lib/entity_data_parser')
const entityAttributeParser = require('../lib/entity_attribute_parser')
const { simplify } = require('wikibase-sdk')
const logClaims = require('../lib/log_claims')
const { bgGreen, bgBlue, dim } = require('chalk')
const _ = require('lodash')
const { mainProps } = require('../lib/properties')
const errors_ = require('../lib/errors')

const programOptions = [
  [ '-p, --properties <properties>', 'request additional properties (separated by a comma)']
]

const parseEntity = (entity, options) => {
  if (entity.missing != null) {
    console.log(dim('missing'))
    return Promise.resolve()
  }

  const { lang, program } = options

  const label = entityAttributeParser(entity, 'label', lang)
  console.log(bgGreen('Label'), label)

  const description = entityAttributeParser(entity, 'description', lang)
  if (description) console.log(bgBlue('Description'), description)

  var { claims } = entity
  const properties = (program.properties && program.properties.split(',')) || []
  claims = program.verbose ? claims : _.pick(claims, mainProps.concat(properties))
  claims = simplify.claims(claims)

  return logClaims(program, claims)
  .catch(errors_.exit)
}

const parser = options => entities => {
  const entitiesList = _.values(entities)
  let firstLogged = false

  // Log entities sequentially as properties still need an async operation
  const parseNext = () => {
    const nextEntity = entitiesList.shift()
    if (!nextEntity) return

    if (firstLogged) {
      // Add a line between summaries
      console.log('')
    } else {
      firstLogged = true
    }

    console.log(dim('id'), nextEntity.id)

    return parseEntity(nextEntity, options).then(parseNext)
  }

  return parseNext()
}

entityDataParser({ commandName: 'summary', parser, programOptions })
