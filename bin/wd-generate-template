#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-p, --props <props>', 'request only certain properties (info, sitelinks, aliases, labels, descriptions, claims, datatype)')
.option('-r, --revision <id>', 'request a specific revision')
.option('-f, --format <format>', 'Default: json. Alternatives: js')
.process('generate-template')

if (program.args.length === 0) return program.help()

const parseId = require('../lib/tolerant_id_parser')
const id = parseId(program.args[0])
const { isEntityId, getEntityRevision, getEntities, simplify } = require('../lib/wbk')(program)
const lightGet = require('../lib/light_get')
const _ = require('lodash')
const parseProps = require('../lib/parse_props')
const dropNonSelectedSubprops = require('../lib/drop_non_selected_subprops')
const minimizeClaims = require('../lib/minimize_claims')
const { revision } = program

if (!isEntityId(id)) throw new Error(`invalid entity id: ${id}`)

const { props, propsSubkeys } = parseProps(program.props)

var url
if (revision) {
  url = getEntityRevision(id, revision)
} else {
  url = getEntities({ ids: [ id ], props })
}

const requiredKeys = [ 'id', 'labels', 'descriptions', 'aliases', 'claims', 'sitelinks' ]

const simplifyOptions = {
  keepIds: true,
  keepQualifiers: true,
  keepReferences: true,
  keepRichValues: true,
  keepNonTruthy: true,
  keepSnaktypes: true,
  // No need to keep the hashes as every edited claim (identified with a GUID)
  // will have it's qualifiers and references fully overriden
  keepHashes: false
}

lightGet(url)
.then(body => {
  var entity = _.values(body.entities)[0]
  entity = simplify.entity(entity, simplifyOptions)
  entity = _.pick(entity, requiredKeys)
  if (revision) entity = _.pick(entity, [ 'id' ].concat(props))
  dropNonSelectedSubprops(entity, props, propsSubkeys)
  minimizeClaims(entity.claims)
  if (program.format === 'js') {
    console.log(require('../lib/output_js_function')(entity))
  } else {
    console.log(JSON.stringify(entity, null, 2))
  }
})
