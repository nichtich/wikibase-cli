#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-p, --wikipedia', 'open the Wikipedia article')
.option('-y, --history', 'open the Wikidata history')
.option('-u, --url', 'simply generate the url')
.option('-r, --revision <id>', 'open a specific revision')
.process('open')

const getSitelinkUrl = require('../lib/get_sitelink_url')(program)
const parseId = require('../lib/tolerant_id_parser')
const copy = require('../lib/copy')
const open = require('opn')

const { instance } = program
if (!instance) throw new Error('no instance set')
const instanceDomain = instance.replace('/w/api.php', '')

const { args, lang } = program
if (args.length === 0) return program.help()

var ids
try {
  ids = args.map(parseId).filter(id => id != null)
} catch (err) {
  // invalid ids: trigger a search
}

const { url: urlOnly, clipboard } = program

const handle = url => {
  if (urlOnly) {
    clipboard ? copy(url) : console.log(url)
  } else {
    if (clipboard) copy(url)
    open(url)
  }
}

if (!ids || ids.length === 0) {
  const search = encodeURIComponent(args.join(' '))
  if (program.wikipedia) {
    handle(`https://${lang}.wikipedia.org/w/index.php?title=Special:Search&search=${search}`)
  } else {
    handle(`${instanceDomain}/w/index.php?title=Special:Search&search=${search}`)
  }
  return
}

const openId = id => {
  if (program.wikipedia) {
    getSitelinkUrl(id, lang, 'wiki')
    .then(handle)
    .catch(err => {
      console.error('Wikipedia article not found: opening Wikidata page on sitelinks')
      handle(`${instanceDomain}/wiki/${id}#sitelinks-wikipedia`)
    })
  } else if (program.history){
    handle(`${instanceDomain}/w/index.php?title=${id}&action=history`)
  } else if (program.revision){
    handle(`${instanceDomain}/w/index.php?title=${id}&oldid=${program.revision}`)
  } else {
    handle(`${instanceDomain}/entity/${id}`)
  }
}

ids.forEach(openId)
