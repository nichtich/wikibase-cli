#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-p, --properties <properties>', 'request additional properties (separated by a comma) (implies verbose mode)')
.option('-t, --limit <num>', 'set a custom limit (defaults to 10)')
.process('search')

// Accept several words without requiring those to be joined by quotes
const search = program.args.join(' ')

if (!(search && search.length > 0)) return program.help()

var { lang:language, json, verbose, properties, limit } = program
limit = limit || 10

if (properties) program.verbose = verbose = true

const { red, grey } = require('chalk')
const valide = require('../lib/valide')
if (!valide.lang(language)) {
  console.error(red(`invalid language: ${language}`))
  process.exit(1)
}

const { searchEntities } = require('../lib/wbk')(program)
const lightGet = require('../lib/light_get')
const { padEnd } = require('lodash')

const url = searchEntities({
  search,
  language,
  // Fetch more in case we need to filter-out some results
  limit: limit + 10
})

lightGet(url)
.then(body => {
  const { error, search } = body

  if (error) {
    console.error('API error response: ' + error.info)
    process.exit(1)
  }

  var results = body.search

  if (results.length > 5) {
    results = results.filter(filterOutSpecialPages)
  }

  results = results.slice(0, limit)

  if (json) {
    console.log(JSON.stringify(results, null, 2))
    return
  }

  const ids = results.map(result => result.id)

  if (ids.length === 0) {
    console.error('no result')
    process.exit(1)
  }

  // In verbose mode, pass the found ids to the 'wd summary' command
  // to get a summary of each entity, possibly with additional properties
  if (verbose) {
    var command = `summary ${ids.join(' ')}`
    if (language) command += ` --lang ${language}`
    if (properties) command += ` --properties ${properties}`
    require('../lib/sub_command')(command)
    return
  }

  results
  .forEach((result, index) => {
    const { id, label, description } = result
    let text = padEnd(id, 11) + label
    if (description && description.length > 0) text += ' ' + grey(description)
    console.log(text)
  })
})

const filterOutSpecialPages = result => {
  result.description = result.description || ''
  return !result.description.match(/(Wiki(m|p)(e|Ã©)dia)/)
}
